name: Test Build and Publish
on:
#  push:
#    branches: [ master ]
#  pull_request:
#    types: [closed]
#    branches: [ master ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
#        os: [macos-latest, ubuntu-latest]
#        os: [macos-latest, windows-latest, ubuntu-latest]
        dotnet: [{ framework: netcoreapp2.1, version: 2.1.x, settings: coverlet }, { framework: netcoreapp3.1, version: 3.1.x, settings: coverlet }, { framework: net5.0, version: 5.0.x, settings: coverlet }, { framework: net461, version: 4.6.1, settings: mscoverage }]

    steps:
    - uses: actions/checkout@v2

    - name: Install Prerequisites
      run: |
        sudo apt-get update
        cd DapperExtensions.Test
        dotnet tool install -g dotnet-reportgenerator-globaltool
        cd ..
#        sudo apt install libxml2-dev -y
#        sudo apt-get install build-essential -y
#        sudo apt install sqlite3 -y
#        sudo apt install unzip -y
    
    - name: Setup netcore 2.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    
    - name: Setup netcore 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    
    - name: Setup net 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Setup .Net 4.6.1
      run: export FrameworkPathOverride="/Library/lib/mono/${{ matrix.dotnet.version }}-api/"

    - name: Start databases
      run: |
        cd Docker
        docker-compose up -d

    - name: Setup DB2 Lib Paths
      run: |
        export DB2_CLI_DRIVER_INSTALL_PATH=$(pwd)/DapperExtensions.Test/bin/debug/${{ matrix.dotnet.framework }}/clidriver
        echo $DB2_CLI_DRIVER_INSTALL_PATH
        export LD_LIBRARY_PATH=$DB2_CLI_DRIVER_INSTALL_PATH/lib
        export LIBPATH=$LD_LIBRARY_PATH
        export LD_LIBRARY_PATH=$DB2_CLI_DRIVER_INSTALL_PATH/lib
        export PATH=$PATH:$DB2_CLI_DRIVER_INSTALL_PATH/bin::$DB2_CLI_DRIVER_INSTALL_PATH/adm:$LD_LIBRARY_PATH

    - name: Update DB2 package
      run: |
        cd DapperExtensions.Test
        sed -i 's/"IBM.Data.DB2.Core"/"IBM.Data.DB2.Core-lnx"/gI' DapperExtensions.Test.csproj
        cd ..

#    - name: Clean solution
#      run: dotnet clean DapperExtensions.sln

    - name: Install dependencies
      run: dotnet restore DapperExtensions.sln

#    - name: Install ReportGenerator
#      run: |
#        cd DapperExtensions.Test
#        dotnet tool install -g dotnet-reportgenerator-globaltool
#        cd ..
      
    - name: Build
      run: dotnet build DapperExtensions.sln -c Debug --no-restore
        
    - name: Setup SQLite
      if: ${{ matrix.dotnet.version == '4.6.1' }} 
      run: |
        mkdir Support
        curl https://system.data.sqlite.org/blobs/1.0.114.0/sqlite-netFx-full-source-1.0.114.0.zip -o ./Support/sqlite_source.zip
        cd Support
        mkdir SQLite
        unzip sqlite_source.zip -d SQLite -y
        cd SQLite/Setup
        chmod +x compile-interop-assembly-release.sh
        export SQLITE_NET_YEAR=2019
        ./compile-interop-assembly-release.sh
        cd ..
        chmod -x ./bin/$SQLITE_NET_YEAR/Release/bin/libSQLite.Interop.so
        cd ../..
        cp ./Support/SQLite/bin/$SQLITE_NET_YEAR/Release/bin/* ./DapperExtensions.Test/bin/debug/${{ matrix.dotnet.framework }} 
      
#    - name: Setup Sql Server CE Client
#      if: ${{ matrix.dotnet.version == '4.6.1' }} 
#      shell: pwsh
#      run: |
#       xcopy .\DapperExtensions.Test\Microsoft.SQLSERVER.CE.4.0\*.* .\DapperExtensions.Test\bin\debug\${{ matrix.dotnet.framework }} /E /I /H /k /y /f
#        $env:Path += ";D:\a\Dapper-Extensions\Dapper-Extensions\DapperExtensions.Test\Microsoft.SQLSERVER.CE.4.0\"
#        $env:Path += ";D:\a\Dapper-Extensions\Dapper-Extensions\DapperExtensions.Test\Microsoft.SQLSERVER.CE.4.0\amd64"
      
    - name: Test
      run: dotnet test ./DapperExtensions.Test -c Debug --collect:"XPlat Code Coverage" -verbosity:diagnostic -bl:msbuild.binlog -noconsolelogger --framework:${{ matrix.dotnet.framework }} --settings:${{ matrix.dotnet.settings }}.runsettings --no-build
      
    - name: Coverage Report
      if: ${{ always() && matrix.dotnet.version != '4.6.1' }} 
      run: reportgenerator "-reports:./**/coverage.cobertura.xml" "-targetdir:./CoverageReports/${{ matrix.dotnet.framework }}" -reporttypes:Html

    - name: Coverage Report
      if: ${{ always() && matrix.dotnet.version == '4.6.1' }} 
      shell: pwsh
      run: |
        $filepath="$env:userprofile\.nuget\packages\microsoft.codecoverage\16.9.4\build\netstandard1.0\CodeCoverage\CodeCoverage.exe"
        foreach ($f in Get-ChildItem -Path . -Filter "*.coverage" -Recurse){ 
          $outpath=Split-Path -Path $f.Directory -Resolve -NoQualifier
          $arguments="analyze /output:$outpath\net461.coveragexml $f"
          Start-Process -FilePath $filepath -ArgumentList $arguments -NoNewWindow -Wait -WorkingDirectory:.
        }
        foreach ($f in Get-ChildItem -Path . -Filter "net461.coveragexml" -Recurse){ 
          reportgenerator "-reports:$f" "-targetdir:.\CoverageReports\${{ matrix.dotnet.framework }}" -reporttypes:Html
        }

    - name: Coverage Report
      run: |
        find ... | while read -r file; do
          echo "look at my $file, my $file is amazing";
        done

    - name: Upload dotnet test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-results-${{ matrix.dotnet.version }}
        path: ./CoverageReports/${{ matrix.dotnet.framework }}
      
    - name: Remove Coverage files
      if: ${{ always() && matrix.dotnet.version != '4.6.1' }} 
      run: find . -name '*cobertura.xml' -delete

    - name: Remove Coverage files
      if: ${{ always() && matrix.dotnet.version == '4.6.1' }} 
      run: find . -name '*net461.coveragexml*' -delete      


  test_SqlCe:
    runs-on: windows-latest

    strategy:
      matrix:
        dotnet: [{ framework: net461, version: 4.6.1, settings: mscoverage }]

    steps:
    - uses: actions/checkout@v2

    - name: Setup netcore 2.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.1.x
    
    - name: Setup netcore 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    
    - name: Setup net 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
#    - name: Clean solution
#      run: dotnet clean DapperExtensions.sln

    - name: Install dependencies
      run: dotnet restore DapperExtensions.sln -f
      
    - name: Build
      run: dotnet build DapperExtensions.sln -c Debug --no-restore
      
    - name: Setup Sql Server CE Client
      run: |
        Invoke-WebRequest -Uri "https://download.microsoft.com/download/F/F/D/FFDF76E3-9E55-41DA-A750-1798B971936C/ENU/SSCERuntime_x64-ENU.exe" -OutFile ./sqlce_client.exe
        ./sqlce_client.exe /i /quiet /log sqlce_install.log
        xcopy .\DapperExtensions.Test\Microsoft.SQLSERVER.CE.4.0\*.* .\DapperExtensions.Test\bin\debug\${{ matrix.dotnet.framework }} /E /I /H /k /y /f
#        regsvr32 .\DapperExtensions.Test\bin\debug\${{ matrix.dotnet.framework }}\adm64\sqlceca40.dll
#        regsvr32 .\DapperExtensions.Test\bin\debug\${{ matrix.dotnet.framework }}\adm64\sqlceoledb40.dll
#        $env:Path += ";D:\a\Dapper-Extensions\Dapper-Extensions\DapperExtensions.Test\Microsoft.SQLSERVER.CE.4.0\"
#        $env:Path += ";D:\a\Dapper-Extensions\Dapper-Extensions\DapperExtensions.Test\Microsoft.SQLSERVER.CE.4.0\amd64"

    - name: Upload SqlCe Client installation logs
      uses: actions/upload-artifact@v2
      with:
        name: sqlce_install_logs
        path: ./sqlce_install*.*
      
    - name: Test
      run: dotnet test ./DapperExtensions.Test -c Debug --collect:"XPlat Code Coverage" -verbosity:diagnostic -bl:msbuild.binlog -noconsolelogger --framework:${{ matrix.dotnet.framework }} --settings:${{ matrix.dotnet.settings }}.runsettings --no-build --filter SqlCe

    - name: Upload dotnet test logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-test-logs-${{ matrix.dotnet.version }}
        path: ./TestResults/Test*.*
        
#    - name: Coverage Report
#      if: ${{ matrix.dotnet.version != '4.6.1' }} 
#      run: reportgenerator "-reports:./**/coverage.cobertura.xml" "-targetdir:./CoverageReports/${{ matrix.dotnet.framework }}" -reporttypes:Html

    - name: Coverage Report
      if: ${{ matrix.dotnet.version == '4.6.1' }} 
      shell: pwsh
      run: |
        $filepath="$env:userprofile\.nuget\packages\microsoft.codecoverage\16.9.4\build\netstandard1.0\CodeCoverage\CodeCoverage.exe"
        foreach ($f in Get-ChildItem -Path . -Filter "*.coverage" -Recurse){ 
          $outpath=Split-Path -Path $f.Directory -Resolve -NoQualifier
          $arguments="analyze /output:$outpath\net461.coveragexml $f"
          Start-Process -FilePath $filepath -ArgumentList $arguments -NoNewWindow -Wait -WorkingDirectory:.
        }
        Write-Output $filepath
        foreach ($f in Get-ChildItem -Path . -Filter "net461.coveragexml" -Recurse){ 
          Write-Output $f
          $filepath "-reports:$f" "-targetdir:.\CoverageReports\${{ matrix.dotnet.framework }}" -reporttypes:Html
        }
      
    - name: Remove Coverage files
      if: ${{ matrix.dotnet.version != '4.6.1' }} 
      run: find . -name '*cobertura.xml' -delete

    - name: Remove Coverage files
      if: ${{ matrix.dotnet.version == '4.6.1' }} 
      run: find . -name '*net461.coveragexml*' -delete

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-results-${{ matrix.dotnet.version }}
        path: ./CoverageReports/${{ matrix.dotnet.framework }}
      


  publish:
    runs-on: windows-latest
    needs: [test, test_SqlCe]
    env:
      NUGET_AUTH_TOKEN: ${{secrets.NUGET_API_KEY}}
       
    steps:
    - uses: actions/checkout@v2
          
    - name: Install dependencies
      run: dotnet restore DapperExtensions.sln
      
    - name: Build
      run: dotnet build DapperExtensions.sln --configuration Release --no-restore
      
    - name: Pack Default Version
      run: dotnet pack --no-build --configuration Release ./DapperExtensions/DapperExtensions.csproj --output .
      
    - name: Pack Signed Version
      run: dotnet pack --no-build --configuration Release ./DapperExtensions.StrongName/DapperExtensions.StrongName.csproj --output .
      
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: nuget_packages
        path: .\*.nupkg
        
#    - name: PushNuget
#      run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}} --skip-duplicate
